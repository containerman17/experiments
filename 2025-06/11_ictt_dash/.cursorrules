For indexers, do not run any compatibility upgrades - we will just drop db and
reindex in a few minutes. For blocks db, ask me before doing any non-reverse
compatible changes requiring manual upgrade.

**I will run it myself**: Do not test, do not run anything, just write. I will
test manually. DO NOT RUN npm run dev, npm run openapi, or any other commands
that start the project or generate files. Only write code.

Do not add tags and summary field on fastify api specs.

Indexers have to accumulate changes in ram and then dump to the database
alltogether in the end.

Transactions in handleTxBatch have tx.blockTs field

handleTxBatch are already wrapped in a tx, no need for tramsactions inside
handleTxBatch

Any chain-specific requests should start with /api/{evmChainId}/

Don't forget to bump indexer version if you did any changes to indexing logic or
db structure

**Language**: Only TypeScript with ES6 imports allowed. No JavaScript files, no
require() statements.

do not call toLowerCase ever. in a loop it is a CPU hoarder

Do not use text color, unless absolutely necessary.

blocksDbHelper methods are synchronous (not async) and don't throw unless
something incredibly horrible happened - no need for try/catch or await.

Never use try-catch blocks (unless explicitly asked to) - all APIs are sync,
database is local. If it fails, something has gone very wrong and should be an
error.

UI users are technical and appreciate detailed information about how indexing
works (especially which events are tracked, contract addresses, etc). Include
technical details in UI descriptions.

Teleporter = ICM = InterchainMessagingProtocol=Cross Chain messages (same thing)
